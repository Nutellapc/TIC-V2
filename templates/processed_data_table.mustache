<div class="mt-8">
    <h2 class="text-xl font-semibold text-gray-700">
        Datos Procesados del Curso
        <span class="text-sm text-gray-500">(Última actualización: {{last_updated}})</span>
    </h2>

    <!-- Contenedor para hacer la tabla responsive -->
    <div class="overflow-x-auto">
        <table class="min-w-full bg-white shadow-lg rounded-lg border-collapse border border-gray-200">
            <thead>
            <tr class="bg-blue-600 text-white text-left text-sm uppercase tracking-wider">
                <th class="px-6 py-3">ID de Usuario</th>
                <th class="px-6 py-3">Nombre</th>
                <th class="px-6 py-3">Predicción</th>
                <th class="px-6 py-3">Acciones</th>
            </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
            {{#processed_data}}
                <tr class="hover:bg-gray-100">
                    <td class="px-6 py-4 text-gray-700">{{userid}}</td>
                    <td class="px-6 py-4 text-gray-700">{{username}}</td>
                    <td class="px-6 py-4 text-gray-700">
                        {{#prediction_score_equals_negative_one}}
                            Predicción no disponible
                        {{/prediction_score_equals_negative_one}}
                        {{^prediction_score_equals_negative_one}}
                            {{prediction_score}}
                        {{/prediction_score_equals_negative_one}}
                    </td>

                    <td class="px-6 py-4">
                        <!-- Botón para ver detalles -->
                        <button
                            class="bg-blue-500 text-white text-lg px-6 py-2 w-full rounded-xl shadow-lg hover:bg-blue-700 transition-transform transform hover:scale-105"
                            onclick="openModal('{{username}}', '{{userid}}', '{{prediction_score}}', '{{hours_studied}}', '{{attendance}}', '{{inactive_time}}', '{{general_grade}}', '{{forum_participations}}')"
                            data-prediction="{{prediction_score}}">
                            Ver detalles
                        </button>

                        <!-- Botón para ver recomendaciones -->
                        <button
                            class="bg-green-500 text-white text-lg px-6 py-2 w-full rounded-xl shadow-lg hover:bg-green-700 transition-transform transform hover:scale-105 mt-2"
                            onclick="openRecommendationsModal('{{username}}', '{{recommendations}}')">
                            Ver recomendaciones
                        </button>

                    </td>
                </tr>
            {{/processed_data}}
            </tbody>
        </table>
    </div>

    {{^processed_data}}
        <p class="text-gray-500 mt-4">No hay datos procesados para este curso.</p>
    {{/processed_data}}
</div>

<!-- Modal -->
{{> modal }}

{{> recommendationsModal }}



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    function openModal(name, userId, prediction, hoursStudied, attendance, inactiveTime, generalGrade, forumParticipations) {
        const data = {
            prediction: prediction,
            predictionEqualsNegativeOne: parseInt(prediction, 10) === -1 // Asegurarse de comparar numéricamente

        };

        // Asignar los datos del usuario al modal
        document.getElementById('modalName').innerText = name;
        document.getElementById('modalUserId').innerText = userId;

        // Mostrar mensaje según la predicción
        if (data.predictionEqualsNegativeOne) {
            document.getElementById('modalPrediction').innerText = 'Los datos aún no alcanzan los valores requeridos para realizar una predicción precisa.';
        } else {
            document.getElementById('modalPrediction').innerText = ` ${data.prediction}`;
        }

        // Definir los rangos para escalar y los mínimos
        const ranges = {
            hoursStudied: { min: 0, max: 44 },
            attendance: { min: 0, max: 100 },
            inactiveTime: { min: 0, max: 12 },
            generalGrade: { min: 0, max: 10 },
            forumParticipations: { min: 0, max: 8 }
        };

        const originalMin = {
            hoursStudied: 2,
            attendance: 50,
            inactiveTime: 4,
            generalGrade: 50,
            forumParticipations: 0
        };

        // Escalar valores a 0-100
        const scaledHoursStudied = ((hoursStudied - ranges.hoursStudied.min) / (ranges.hoursStudied.max - ranges.hoursStudied.min)) * 100;
        const scaledAttendance = ((attendance - ranges.attendance.min) / (ranges.attendance.max - ranges.attendance.min)) * 100;
        const scaledInactiveTime = ((inactiveTime - ranges.inactiveTime.min) / (ranges.inactiveTime.max - ranges.inactiveTime.min)) * 100;
        const scaledGeneralGrade = ((generalGrade - ranges.generalGrade.min) / (ranges.generalGrade.max - ranges.generalGrade.min)) * 100;
        const scaledForumParticipations = ((forumParticipations - ranges.forumParticipations.min) / (ranges.forumParticipations.max - ranges.forumParticipations.min)) * 100;

        // Cambiar colores basados en los límites originales
        const pointColors = [
            hoursStudied != null && hoursStudied >= originalMin.hoursStudied ? 'green' : 'red',
            attendance != null && attendance >= originalMin.attendance ? 'green' : 'red',
            inactiveTime != null && inactiveTime >= originalMin.inactiveTime ? 'green' : 'red',
            generalGrade != null && generalGrade >= originalMin.generalGrade ? 'green' : 'red',
            forumParticipations != null && forumParticipations >= originalMin.forumParticipations ? 'green' : 'red'
        ];

        // Configurar el gráfico radar
        const radarCanvas = document.getElementById('radarChart');
        const radarData = {
            labels: [
                `Horas Estudiadas `,
                `Asistencia `,
                `Inactividad `,
                `Calificación General `,
                `Part en Foros `
            ],
            datasets: [{
                label: 'Datos del Estudiante',
                data: [
                    scaledHoursStudied,
                    scaledAttendance,
                    scaledInactiveTime,
                    scaledGeneralGrade,
                    scaledForumParticipations
                ],
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 2,
                pointBackgroundColor: pointColors // Colores dinámicos para los puntos
            }]
        };

        const radarOptions = {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                r: {
                    angleLines: {
                        display: true // Mostrar líneas angulares
                    },
                    min: 0, // Mínimo común para todos los ejes
                    max: 100, // Máximo común para todos los ejes
                    ticks: {
                        stepSize: 20, // Intervalos de pasos
                        backdropColor: 'rgba(255, 255, 255, 0.8)' // Fondo blanco detrás de los valores
                    },
                    pointLabels: {
                        font: {
                            size: 16
                        },
                        color: '#333'
                    }
                }
            },
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            const rawData = [hoursStudied, attendance, inactiveTime, generalGrade, forumParticipations];
                            const labels = ['Horas Estudiadas', 'Asistencia', 'Inactividad', 'Calificación General', 'Part en Foros'];
                            const index = context.dataIndex;

                            // Mostrar etiqueta con valor original
                            return `${labels[index]}: ${rawData[index]} (Escalado: ${Math.round(context.raw)})`;
                        }
                    }
                },
                legend: {
                    labels: {
                        font: {
                            size: 16
                        }
                    }
                }
            }
        };

        // Destruir el gráfico existente si ya está inicializado
        if (window.radarChartInstance) {
            window.radarChartInstance.destroy();
        }
        window.radarChartInstance = new Chart(radarCanvas, {
            type: 'radar',
            data: radarData,
            options: radarOptions
        });

        // Mostrar el modal
        document.getElementById('detailsModal').classList.remove('hidden');
    }

    function closeModal() {
        // Cerrar el modal
        document.getElementById('detailsModal').classList.add('hidden');
        if (window.radarChartInstance) {
            window.radarChartInstance.destroy();
            window.radarChartInstance = null;
        }
    }

    function openRecommendationsModal(name, recommendations) {
        // Validar que las recomendaciones no estén vacías
        const modalContent = recommendations || 'No hay recomendaciones disponibles.';

        // Asignar datos al modal
        document.getElementById('recommendationsName').innerText = name;
        document.getElementById('recommendationsContent').innerText = modalContent;

        // Mostrar el modal
        document.getElementById('recommendationsModal').classList.remove('hidden');
    }

    function closeRecommendationsModal() {
        // Cerrar el modal
        document.getElementById('recommendationsModal').classList.add('hidden');
    }



</script>


